
sequencer-project-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c8  080040c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d0  080040d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08004148  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004148  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc2d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002054  00000000  00000000  0002fccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021455  00000000  00000000  00033590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8d4  00000000  00000000  000549e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ba9  00000000  00000000  0005f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  00121ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003f58 	.word	0x08003f58

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003f58 	.word	0x08003f58

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030a:	f1a4 0401 	sub.w	r4, r4, #1
 800030e:	d1e9      	bne.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__gedf2>:
 8000544:	f04f 3cff 	mov.w	ip, #4294967295
 8000548:	e006      	b.n	8000558 <__cmpdf2+0x4>
 800054a:	bf00      	nop

0800054c <__ledf2>:
 800054c:	f04f 0c01 	mov.w	ip, #1
 8000550:	e002      	b.n	8000558 <__cmpdf2+0x4>
 8000552:	bf00      	nop

08000554 <__cmpdf2>:
 8000554:	f04f 0c01 	mov.w	ip, #1
 8000558:	f84d cd04 	str.w	ip, [sp, #-4]!
 800055c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056e:	d01b      	beq.n	80005a8 <__cmpdf2+0x54>
 8000570:	b001      	add	sp, #4
 8000572:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000576:	bf0c      	ite	eq
 8000578:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800057c:	ea91 0f03 	teqne	r1, r3
 8000580:	bf02      	ittt	eq
 8000582:	ea90 0f02 	teqeq	r0, r2
 8000586:	2000      	moveq	r0, #0
 8000588:	4770      	bxeq	lr
 800058a:	f110 0f00 	cmn.w	r0, #0
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf58      	it	pl
 8000594:	4299      	cmppl	r1, r3
 8000596:	bf08      	it	eq
 8000598:	4290      	cmpeq	r0, r2
 800059a:	bf2c      	ite	cs
 800059c:	17d8      	asrcs	r0, r3, #31
 800059e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a2:	f040 0001 	orr.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	d102      	bne.n	80005b8 <__cmpdf2+0x64>
 80005b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b6:	d107      	bne.n	80005c8 <__cmpdf2+0x74>
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c0:	d1d6      	bne.n	8000570 <__cmpdf2+0x1c>
 80005c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c6:	d0d3      	beq.n	8000570 <__cmpdf2+0x1c>
 80005c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_cdrcmple>:
 80005d0:	4684      	mov	ip, r0
 80005d2:	4610      	mov	r0, r2
 80005d4:	4662      	mov	r2, ip
 80005d6:	468c      	mov	ip, r1
 80005d8:	4619      	mov	r1, r3
 80005da:	4663      	mov	r3, ip
 80005dc:	e000      	b.n	80005e0 <__aeabi_cdcmpeq>
 80005de:	bf00      	nop

080005e0 <__aeabi_cdcmpeq>:
 80005e0:	b501      	push	{r0, lr}
 80005e2:	f7ff ffb7 	bl	8000554 <__cmpdf2>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	bf48      	it	mi
 80005ea:	f110 0f00 	cmnmi.w	r0, #0
 80005ee:	bd01      	pop	{r0, pc}

080005f0 <__aeabi_dcmpeq>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff fff4 	bl	80005e0 <__aeabi_cdcmpeq>
 80005f8:	bf0c      	ite	eq
 80005fa:	2001      	moveq	r0, #1
 80005fc:	2000      	movne	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmplt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffea 	bl	80005e0 <__aeabi_cdcmpeq>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_dcmple>:
 8000618:	f84d ed08 	str.w	lr, [sp, #-8]!
 800061c:	f7ff ffe0 	bl	80005e0 <__aeabi_cdcmpeq>
 8000620:	bf94      	ite	ls
 8000622:	2001      	movls	r0, #1
 8000624:	2000      	movhi	r0, #0
 8000626:	f85d fb08 	ldr.w	pc, [sp], #8
 800062a:	bf00      	nop

0800062c <__aeabi_dcmpge>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff ffce 	bl	80005d0 <__aeabi_cdrcmple>
 8000634:	bf94      	ite	ls
 8000636:	2001      	movls	r0, #1
 8000638:	2000      	movhi	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmpgt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffc4 	bl	80005d0 <__aeabi_cdrcmple>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_uldivmod>:
 8000654:	b953      	cbnz	r3, 800066c <__aeabi_uldivmod+0x18>
 8000656:	b94a      	cbnz	r2, 800066c <__aeabi_uldivmod+0x18>
 8000658:	2900      	cmp	r1, #0
 800065a:	bf08      	it	eq
 800065c:	2800      	cmpeq	r0, #0
 800065e:	bf1c      	itt	ne
 8000660:	f04f 31ff 	movne.w	r1, #4294967295
 8000664:	f04f 30ff 	movne.w	r0, #4294967295
 8000668:	f000 b972 	b.w	8000950 <__aeabi_idiv0>
 800066c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000674:	f000 f806 	bl	8000684 <__udivmoddi4>
 8000678:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000680:	b004      	add	sp, #16
 8000682:	4770      	bx	lr

08000684 <__udivmoddi4>:
 8000684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000688:	9e08      	ldr	r6, [sp, #32]
 800068a:	4604      	mov	r4, r0
 800068c:	4688      	mov	r8, r1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d14b      	bne.n	800072a <__udivmoddi4+0xa6>
 8000692:	428a      	cmp	r2, r1
 8000694:	4615      	mov	r5, r2
 8000696:	d967      	bls.n	8000768 <__udivmoddi4+0xe4>
 8000698:	fab2 f282 	clz	r2, r2
 800069c:	b14a      	cbz	r2, 80006b2 <__udivmoddi4+0x2e>
 800069e:	f1c2 0720 	rsb	r7, r2, #32
 80006a2:	fa01 f302 	lsl.w	r3, r1, r2
 80006a6:	fa20 f707 	lsr.w	r7, r0, r7
 80006aa:	4095      	lsls	r5, r2
 80006ac:	ea47 0803 	orr.w	r8, r7, r3
 80006b0:	4094      	lsls	r4, r2
 80006b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006b6:	0c23      	lsrs	r3, r4, #16
 80006b8:	fbb8 f7fe 	udiv	r7, r8, lr
 80006bc:	fa1f fc85 	uxth.w	ip, r5
 80006c0:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006c8:	fb07 f10c 	mul.w	r1, r7, ip
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x60>
 80006d0:	18eb      	adds	r3, r5, r3
 80006d2:	f107 30ff 	add.w	r0, r7, #4294967295
 80006d6:	f080 811b 	bcs.w	8000910 <__udivmoddi4+0x28c>
 80006da:	4299      	cmp	r1, r3
 80006dc:	f240 8118 	bls.w	8000910 <__udivmoddi4+0x28c>
 80006e0:	3f02      	subs	r7, #2
 80006e2:	442b      	add	r3, r5
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	b2a4      	uxth	r4, r4
 80006e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80006ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80006f8:	45a4      	cmp	ip, r4
 80006fa:	d909      	bls.n	8000710 <__udivmoddi4+0x8c>
 80006fc:	192c      	adds	r4, r5, r4
 80006fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000702:	f080 8107 	bcs.w	8000914 <__udivmoddi4+0x290>
 8000706:	45a4      	cmp	ip, r4
 8000708:	f240 8104 	bls.w	8000914 <__udivmoddi4+0x290>
 800070c:	3802      	subs	r0, #2
 800070e:	442c      	add	r4, r5
 8000710:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000714:	eba4 040c 	sub.w	r4, r4, ip
 8000718:	2700      	movs	r7, #0
 800071a:	b11e      	cbz	r6, 8000724 <__udivmoddi4+0xa0>
 800071c:	40d4      	lsrs	r4, r2
 800071e:	2300      	movs	r3, #0
 8000720:	e9c6 4300 	strd	r4, r3, [r6]
 8000724:	4639      	mov	r1, r7
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	428b      	cmp	r3, r1
 800072c:	d909      	bls.n	8000742 <__udivmoddi4+0xbe>
 800072e:	2e00      	cmp	r6, #0
 8000730:	f000 80eb 	beq.w	800090a <__udivmoddi4+0x286>
 8000734:	2700      	movs	r7, #0
 8000736:	e9c6 0100 	strd	r0, r1, [r6]
 800073a:	4638      	mov	r0, r7
 800073c:	4639      	mov	r1, r7
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	fab3 f783 	clz	r7, r3
 8000746:	2f00      	cmp	r7, #0
 8000748:	d147      	bne.n	80007da <__udivmoddi4+0x156>
 800074a:	428b      	cmp	r3, r1
 800074c:	d302      	bcc.n	8000754 <__udivmoddi4+0xd0>
 800074e:	4282      	cmp	r2, r0
 8000750:	f200 80fa 	bhi.w	8000948 <__udivmoddi4+0x2c4>
 8000754:	1a84      	subs	r4, r0, r2
 8000756:	eb61 0303 	sbc.w	r3, r1, r3
 800075a:	2001      	movs	r0, #1
 800075c:	4698      	mov	r8, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d0e0      	beq.n	8000724 <__udivmoddi4+0xa0>
 8000762:	e9c6 4800 	strd	r4, r8, [r6]
 8000766:	e7dd      	b.n	8000724 <__udivmoddi4+0xa0>
 8000768:	b902      	cbnz	r2, 800076c <__udivmoddi4+0xe8>
 800076a:	deff      	udf	#255	; 0xff
 800076c:	fab2 f282 	clz	r2, r2
 8000770:	2a00      	cmp	r2, #0
 8000772:	f040 808f 	bne.w	8000894 <__udivmoddi4+0x210>
 8000776:	1b49      	subs	r1, r1, r5
 8000778:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800077c:	fa1f f885 	uxth.w	r8, r5
 8000780:	2701      	movs	r7, #1
 8000782:	fbb1 fcfe 	udiv	ip, r1, lr
 8000786:	0c23      	lsrs	r3, r4, #16
 8000788:	fb0e 111c 	mls	r1, lr, ip, r1
 800078c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000790:	fb08 f10c 	mul.w	r1, r8, ip
 8000794:	4299      	cmp	r1, r3
 8000796:	d907      	bls.n	80007a8 <__udivmoddi4+0x124>
 8000798:	18eb      	adds	r3, r5, r3
 800079a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x122>
 80007a0:	4299      	cmp	r1, r3
 80007a2:	f200 80cd 	bhi.w	8000940 <__udivmoddi4+0x2bc>
 80007a6:	4684      	mov	ip, r0
 80007a8:	1a59      	subs	r1, r3, r1
 80007aa:	b2a3      	uxth	r3, r4
 80007ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b0:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007b8:	fb08 f800 	mul.w	r8, r8, r0
 80007bc:	45a0      	cmp	r8, r4
 80007be:	d907      	bls.n	80007d0 <__udivmoddi4+0x14c>
 80007c0:	192c      	adds	r4, r5, r4
 80007c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x14a>
 80007c8:	45a0      	cmp	r8, r4
 80007ca:	f200 80b6 	bhi.w	800093a <__udivmoddi4+0x2b6>
 80007ce:	4618      	mov	r0, r3
 80007d0:	eba4 0408 	sub.w	r4, r4, r8
 80007d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007d8:	e79f      	b.n	800071a <__udivmoddi4+0x96>
 80007da:	f1c7 0c20 	rsb	ip, r7, #32
 80007de:	40bb      	lsls	r3, r7
 80007e0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e4:	ea4e 0e03 	orr.w	lr, lr, r3
 80007e8:	fa01 f407 	lsl.w	r4, r1, r7
 80007ec:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f0:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007f8:	4325      	orrs	r5, r4
 80007fa:	fbb3 f9f8 	udiv	r9, r3, r8
 80007fe:	0c2c      	lsrs	r4, r5, #16
 8000800:	fb08 3319 	mls	r3, r8, r9, r3
 8000804:	fa1f fa8e 	uxth.w	sl, lr
 8000808:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800080c:	fb09 f40a 	mul.w	r4, r9, sl
 8000810:	429c      	cmp	r4, r3
 8000812:	fa02 f207 	lsl.w	r2, r2, r7
 8000816:	fa00 f107 	lsl.w	r1, r0, r7
 800081a:	d90b      	bls.n	8000834 <__udivmoddi4+0x1b0>
 800081c:	eb1e 0303 	adds.w	r3, lr, r3
 8000820:	f109 30ff 	add.w	r0, r9, #4294967295
 8000824:	f080 8087 	bcs.w	8000936 <__udivmoddi4+0x2b2>
 8000828:	429c      	cmp	r4, r3
 800082a:	f240 8084 	bls.w	8000936 <__udivmoddi4+0x2b2>
 800082e:	f1a9 0902 	sub.w	r9, r9, #2
 8000832:	4473      	add	r3, lr
 8000834:	1b1b      	subs	r3, r3, r4
 8000836:	b2ad      	uxth	r5, r5
 8000838:	fbb3 f0f8 	udiv	r0, r3, r8
 800083c:	fb08 3310 	mls	r3, r8, r0, r3
 8000840:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000844:	fb00 fa0a 	mul.w	sl, r0, sl
 8000848:	45a2      	cmp	sl, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x1da>
 800084c:	eb1e 0404 	adds.w	r4, lr, r4
 8000850:	f100 33ff 	add.w	r3, r0, #4294967295
 8000854:	d26b      	bcs.n	800092e <__udivmoddi4+0x2aa>
 8000856:	45a2      	cmp	sl, r4
 8000858:	d969      	bls.n	800092e <__udivmoddi4+0x2aa>
 800085a:	3802      	subs	r0, #2
 800085c:	4474      	add	r4, lr
 800085e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000862:	fba0 8902 	umull	r8, r9, r0, r2
 8000866:	eba4 040a 	sub.w	r4, r4, sl
 800086a:	454c      	cmp	r4, r9
 800086c:	46c2      	mov	sl, r8
 800086e:	464b      	mov	r3, r9
 8000870:	d354      	bcc.n	800091c <__udivmoddi4+0x298>
 8000872:	d051      	beq.n	8000918 <__udivmoddi4+0x294>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d069      	beq.n	800094c <__udivmoddi4+0x2c8>
 8000878:	ebb1 050a 	subs.w	r5, r1, sl
 800087c:	eb64 0403 	sbc.w	r4, r4, r3
 8000880:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000884:	40fd      	lsrs	r5, r7
 8000886:	40fc      	lsrs	r4, r7
 8000888:	ea4c 0505 	orr.w	r5, ip, r5
 800088c:	e9c6 5400 	strd	r5, r4, [r6]
 8000890:	2700      	movs	r7, #0
 8000892:	e747      	b.n	8000724 <__udivmoddi4+0xa0>
 8000894:	f1c2 0320 	rsb	r3, r2, #32
 8000898:	fa20 f703 	lsr.w	r7, r0, r3
 800089c:	4095      	lsls	r5, r2
 800089e:	fa01 f002 	lsl.w	r0, r1, r2
 80008a2:	fa21 f303 	lsr.w	r3, r1, r3
 80008a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008aa:	4338      	orrs	r0, r7
 80008ac:	0c01      	lsrs	r1, r0, #16
 80008ae:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b2:	fa1f f885 	uxth.w	r8, r5
 80008b6:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008be:	fb07 f308 	mul.w	r3, r7, r8
 80008c2:	428b      	cmp	r3, r1
 80008c4:	fa04 f402 	lsl.w	r4, r4, r2
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x256>
 80008ca:	1869      	adds	r1, r5, r1
 80008cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d0:	d22f      	bcs.n	8000932 <__udivmoddi4+0x2ae>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d92d      	bls.n	8000932 <__udivmoddi4+0x2ae>
 80008d6:	3f02      	subs	r7, #2
 80008d8:	4429      	add	r1, r5
 80008da:	1acb      	subs	r3, r1, r3
 80008dc:	b281      	uxth	r1, r0
 80008de:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e2:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ea:	fb00 f308 	mul.w	r3, r0, r8
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d907      	bls.n	8000902 <__udivmoddi4+0x27e>
 80008f2:	1869      	adds	r1, r5, r1
 80008f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f8:	d217      	bcs.n	800092a <__udivmoddi4+0x2a6>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d915      	bls.n	800092a <__udivmoddi4+0x2a6>
 80008fe:	3802      	subs	r0, #2
 8000900:	4429      	add	r1, r5
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000908:	e73b      	b.n	8000782 <__udivmoddi4+0xfe>
 800090a:	4637      	mov	r7, r6
 800090c:	4630      	mov	r0, r6
 800090e:	e709      	b.n	8000724 <__udivmoddi4+0xa0>
 8000910:	4607      	mov	r7, r0
 8000912:	e6e7      	b.n	80006e4 <__udivmoddi4+0x60>
 8000914:	4618      	mov	r0, r3
 8000916:	e6fb      	b.n	8000710 <__udivmoddi4+0x8c>
 8000918:	4541      	cmp	r1, r8
 800091a:	d2ab      	bcs.n	8000874 <__udivmoddi4+0x1f0>
 800091c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000920:	eb69 020e 	sbc.w	r2, r9, lr
 8000924:	3801      	subs	r0, #1
 8000926:	4613      	mov	r3, r2
 8000928:	e7a4      	b.n	8000874 <__udivmoddi4+0x1f0>
 800092a:	4660      	mov	r0, ip
 800092c:	e7e9      	b.n	8000902 <__udivmoddi4+0x27e>
 800092e:	4618      	mov	r0, r3
 8000930:	e795      	b.n	800085e <__udivmoddi4+0x1da>
 8000932:	4667      	mov	r7, ip
 8000934:	e7d1      	b.n	80008da <__udivmoddi4+0x256>
 8000936:	4681      	mov	r9, r0
 8000938:	e77c      	b.n	8000834 <__udivmoddi4+0x1b0>
 800093a:	3802      	subs	r0, #2
 800093c:	442c      	add	r4, r5
 800093e:	e747      	b.n	80007d0 <__udivmoddi4+0x14c>
 8000940:	f1ac 0c02 	sub.w	ip, ip, #2
 8000944:	442b      	add	r3, r5
 8000946:	e72f      	b.n	80007a8 <__udivmoddi4+0x124>
 8000948:	4638      	mov	r0, r7
 800094a:	e708      	b.n	800075e <__udivmoddi4+0xda>
 800094c:	4637      	mov	r7, r6
 800094e:	e6e9      	b.n	8000724 <__udivmoddi4+0xa0>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__io_putchar>:
void LED_Matrix_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800095c:	1d39      	adds	r1, r7, #4
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2201      	movs	r2, #1
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <__io_putchar+0x20>)
 8000966:	f002 fa57 	bl	8002e18 <HAL_UART_Transmit>

  return ch;
 800096a:	687b      	ldr	r3, [r7, #4]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000019c 	.word	0x2000019c

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* USER CODE BEGIN Init */
	  HAL_Init();
 800097e:	f000 fbd0 	bl	8001122 <HAL_Init>

  /* Configure the system clock */


  /* USER CODE BEGIN SysInit */
	  SystemClock_Config();
 8000982:	f000 f847 	bl	8000a14 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
	  MX_GPIO_Init();
 8000986:	f000 f929 	bl	8000bdc <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 800098a:	f000 f8f7 	bl	8000b7c <MX_USART2_UART_Init>
	  MX_I2C1_Init();
 800098e:	f000 f8b5 	bl	8000afc <MX_I2C1_Init>
	  table[1]=1;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <main+0x94>)
 8000994:	2201      	movs	r2, #1
 8000996:	705a      	strb	r2, [r3, #1]
	  table[2]=2;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <main+0x94>)
 800099a:	2202      	movs	r2, #2
 800099c:	709a      	strb	r2, [r3, #2]
	  table[3]=4;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <main+0x94>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	70da      	strb	r2, [r3, #3]
	  table[4]=3;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <main+0x94>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	711a      	strb	r2, [r3, #4]
	  table[5]=8;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <main+0x94>)
 80009ac:	2208      	movs	r2, #8
 80009ae:	715a      	strb	r2, [r3, #5]
	  table[6]=5;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <main+0x94>)
 80009b2:	2205      	movs	r2, #5
 80009b4:	719a      	strb	r2, [r3, #6]
	  table[7]=7;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <main+0x94>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	71da      	strb	r2, [r3, #7]
	  table[8]=6;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <main+0x94>)
 80009be:	2206      	movs	r2, #6
 80009c0:	721a      	strb	r2, [r3, #8]
	  printf("\r\n Bonjour !!\r\n");
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <main+0x98>)
 80009c4:	f002 febc 	bl	8003740 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (int j = 1; j < 9; j++) {
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	e019      	b.n	8000a02 <main+0x8a>
		  //printf("\r\n=== %d ===\r\n",j);
		if (table[j]<8) {
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <main+0x94>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	d80b      	bhi.n	80009f2 <main+0x7a>
			table[j] = table[j]+1;
 80009da:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <main+0x94>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2d9      	uxtb	r1, r3
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <main+0x94>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	460a      	mov	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e004      	b.n	80009fc <main+0x84>
		}
		else{
			table[j]=1;
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <main+0x94>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
	  for (int j = 1; j < 9; j++) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	dde2      	ble.n	80009ce <main+0x56>
 8000a08:	e7de      	b.n	80009c8 <main+0x50>
 8000a0a:	bf00      	nop
 8000a0c:	20000134 	.word	0x20000134
 8000a10:	08003f70 	.word	0x08003f70

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ac      	sub	sp, #176	; 0xb0
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a1e:	2244      	movs	r2, #68	; 0x44
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fe28 	bl	8003678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2254      	movs	r2, #84	; 0x54
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fe1a 	bl	8003678 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a44:	2310      	movs	r3, #16
 8000a46:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a72:	2307      	movs	r3, #7
 8000a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f871 	bl	8001b70 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a94:	f000 f912 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fc7c 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000abe:	f000 f8fd 	bl	8000cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000ac2:	2342      	movs	r3, #66	; 0x42
 8000ac4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fe71 	bl	80027b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000adc:	f000 f8ee 	bl	8000cbc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae4:	f000 ffee 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000aee:	f000 f8e5 	bl	8000cbc <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	37b0      	adds	r7, #176	; 0xb0
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_I2C1_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <MX_I2C1_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b38:	f000 fe1f 	bl	800177a <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 f8bb 	bl	8000cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b4a:	f000 fea5 	bl	8001898 <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 f8b2 	bl	8000cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_I2C1_Init+0x74>)
 8000b5c:	f000 fee7 	bl	800192e <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f8a9 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000098 	.word	0x20000098
 8000b74:	40005400 	.word	0x40005400
 8000b78:	00707cbb 	.word	0x00707cbb

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART2_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bc0:	f002 f8dc 	bl	8002d7c <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 f877 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000019c 	.word	0x2000019c
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a27      	ldr	r2, [pc, #156]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c40:	f000 fd60 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WHEELB_Pin */
  GPIO_InitStruct.Pin = WHEELB_Pin;
 8000c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHEELB_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xd8>)
 8000c5a:	f000 fbe9 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHEELA_Pin */
  GPIO_InitStruct.Pin = WHEELA_Pin;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHEELA_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c72:	f000 fbdd 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c76:	2308      	movs	r3, #8
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c8e:	f000 fbcf 	bl	8001430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fb93 	bl	80013c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c9c:	2007      	movs	r0, #7
 8000c9e:	f000 fbac 	bl	80013fa <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	10310000 	.word	0x10310000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("\r\n===error===\r\n");
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <Error_Handler+0x10>)
 8000cc2:	f002 fd3d 	bl	8003740 <puts>
  /* USER CODE END Error_Handler_Debug */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08003fd4 	.word	0x08003fd4

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_MspInit+0x60>)
 8000ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_MspInit+0x60>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6613      	str	r3, [r2, #96]	; 0x60
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_MspInit+0x60>)
 8000cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_MspInit+0x60>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_MspInit+0x60>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x60>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fe53 	bl	80019c8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000d22:	f000 feb1 	bl	8001a88 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_I2C_MspInit+0x7c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d127      	bne.n	8000da6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <HAL_I2C_MspInit+0x84>)
 8000d8a:	f000 fb51 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_I2C_MspInit+0x80>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40005400 	.word	0x40005400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000400 	.word	0x48000400

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <HAL_UART_MspInit+0xa0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d13a      	bne.n	8000e54 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0xa4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1e:	2307      	movs	r3, #7
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fb00 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e42:	2303      	movs	r3, #3
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 faee 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f988 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  printf("\r\n=== blobs ===\r\n");
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <EXTI1_IRQHandler+0x44>)
 8000ec6:	f002 fc3b 	bl	8003740 <puts>
  printf("\r\n=== bliibs ===\r\n");
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <EXTI1_IRQHandler+0x48>)
 8000ecc:	f002 fc38 	bl	8003740 <puts>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fc2f 	bl	8001734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if( ((WHEELB_GPIO_Port->IDR)>>14)>0.5 )
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <EXTI1_IRQHandler+0x4c>)
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	0b9b      	lsrs	r3, r3, #14
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fab7 	bl	8000450 <__aeabi_ui2d>
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <EXTI1_IRQHandler+0x50>)
 8000ee8:	f7ff fbaa 	bl	8000640 <__aeabi_dcmpgt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <EXTI1_IRQHandler+0x3a>
  {
	  printf("droite\r\n");
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <EXTI1_IRQHandler+0x54>)
 8000ef4:	f002 fc24 	bl	8003740 <puts>
  else
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
  }
  a+=1;*/
}
 8000ef8:	e002      	b.n	8000f00 <EXTI1_IRQHandler+0x40>
	  printf("gauche\r\n");
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <EXTI1_IRQHandler+0x58>)
 8000efc:	f002 fc20 	bl	8003740 <puts>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08003fe4 	.word	0x08003fe4
 8000f08:	08003ff8 	.word	0x08003ff8
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	3fe00000 	.word	0x3fe00000
 8000f14:	0800400c 	.word	0x0800400c
 8000f18:	08004014 	.word	0x08004014

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fcef 	bl	8000954 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
	}
	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f002 fafc 	bl	8003624 <__errno>
 800102c:	4602      	mov	r2, r0
 800102e:	230c      	movs	r3, #12
 8001030:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20010000 	.word	0x20010000
 8001058:	00000400 	.word	0x00000400
 800105c:	2000008c 	.word	0x2000008c
 8001060:	20000228 	.word	0x20000228

08001064 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <SystemInit+0x64>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <SystemInit+0x64>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <SystemInit+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <SystemInit+0x68>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <SystemInit+0x68>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <SystemInit+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <SystemInit+0x68>)
 8001090:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001094:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001098:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <SystemInit+0x68>)
 800109c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <SystemInit+0x68>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <SystemInit+0x68>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <SystemInit+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SystemInit+0x64>)
 80010b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ba:	609a      	str	r2, [r3, #8]
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	40021000 	.word	0x40021000

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff ffc6 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
	ldr	r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <LoopForever+0x16>)
	cmp	r2, r3
 80010fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f002 fa97 	bl	8003630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fc39 	bl	8000978 <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800110c:	080040d8 	.word	0x080040d8
	ldr	r0, =_sdata
 8001110:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001114:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001118:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800111c:	20000224 	.word	0x20000224

08001120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_IRQHandler>

08001122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f93d 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f80e 	bl	8001154 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e001      	b.n	8001148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001144:	f7ff fdc4 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001148:	79fb      	ldrb	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_InitTick+0x70>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_InitTick+0x6c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f949 	bl	8001416 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d809      	bhi.n	80011a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f913 	bl	80013c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_InitTick+0x74>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e004      	b.n	80011b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e001      	b.n	80011b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	2000021c 	.word	0x2000021c

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000021c 	.word	0x2000021c

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff3e 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff31 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e148      	b.n	80016d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 813a 	beq.w	80016cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <HAL_GPIO_Init+0x48>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	2b11      	cmp	r3, #17
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0xea>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b12      	cmp	r3, #18
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8094 	beq.w	80016cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6613      	str	r3, [r2, #96]	; 0x60
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e6:	d00d      	beq.n	8001604 <HAL_GPIO_Init+0x1d4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x1d0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a42      	ldr	r2, [pc, #264]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015fc:	2307      	movs	r3, #7
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001604:	2300      	movs	r3, #0
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001616:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_GPIO_Init+0x2c4>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001648:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169c:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f47f aeaf 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e002      	b.n	8001728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f806 	bl	8001764 <HAL_GPIO_EXTI_Callback>
  }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40010400 	.word	0x40010400

08001764 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e081      	b.n	8001890 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fac7 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2224      	movs	r2, #36	; 0x24
 80017aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	e006      	b.n	8001802 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001800:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d104      	bne.n	8001814 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001812:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001836:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	ea42 0103 	orr.w	r1, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69d9      	ldr	r1, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	d138      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e032      	b.n	8001922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e000      	b.n	8001922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	d139      	bne.n	80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800194e:	2302      	movs	r3, #2
 8001950:	e033      	b.n	80019ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2224      	movs	r2, #36	; 0x24
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019b8:	2302      	movs	r3, #2
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_PWR_ConfigPVD+0xb8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 020e 	bic.w	r2, r3, #14
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4928      	ldr	r1, [pc, #160]	; (8001a80 <HAL_PWR_ConfigPVD+0xb8>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_PWR_ConfigPVD+0xbc>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40007000 	.word	0x40007000
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_PWR_EnablePVD+0x1c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_PWR_EnablePVD+0x1c>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6053      	str	r3, [r2, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40007000 	.word	0x40007000

08001aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	d130      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d038      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2232      	movs	r2, #50	; 0x32
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	e002      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d102      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f2      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d110      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d007      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b4c:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 bc11 	b.w	80023a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b84:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8e:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80e4 	beq.w	8001d6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4c>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	f040 808b 	bne.w	8001cca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 8087 	bne.w	8001cca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x64>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e3e8      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1a      	ldr	r2, [r3, #32]
 8001bd8:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <HAL_RCC_OscConfig+0x7e>
 8001be4:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	e005      	b.n	8001bfa <HAL_RCC_OscConfig+0x8a>
 8001bee:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d223      	bcs.n	8001c46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd78 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e3c9      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c12:	4b7d      	ldr	r3, [pc, #500]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7c      	ldr	r2, [pc, #496]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4977      	ldr	r1, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	4972      	ldr	r1, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e025      	b.n	8001c92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6f      	ldr	r2, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	496a      	ldr	r1, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fd38 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e389      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c92:	f000 fc6f 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8001c96:	4601      	mov	r1, r0
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_RCC_OscConfig+0x29c>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cae:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x2a0>)
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb2:	4b58      	ldr	r3, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fa4c 	bl	8001154 <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d052      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	e36d      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d032      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fa89 	bl	80011f4 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fa85 	bl	80011f4 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e356      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf8:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3f      	ldr	r2, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	493a      	ldr	r1, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4935      	ldr	r1, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
 8001d36:	e01a      	b.n	8001d6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fa56 	bl	80011f4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fa52 	bl	80011f4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e323      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1dc>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d073      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x21c>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d10e      	bne.n	8001da4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d10b      	bne.n	8001da4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d063      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d15f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e300      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x24c>
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0x288>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x270>
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x288>
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f9f8 	bl	80011f4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e06:	e010      	b.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	0800401c 	.word	0x0800401c
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f9ec 	bl	80011f4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2bd      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	4baf      	ldr	r3, [pc, #700]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2a8>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9dc 	bl	80011f4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f9d8 	bl	80011f4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e2a9      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d0>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d060      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x310>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d116      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4b99      	ldr	r3, [pc, #612]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x328>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e286      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b93      	ldr	r3, [pc, #588]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4990      	ldr	r1, [pc, #576]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	e040      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8b      	ldr	r2, [pc, #556]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f997 	bl	80011f4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff f993 	bl	80011f4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e264      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	497c      	ldr	r1, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e018      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b7a      	ldr	r3, [pc, #488]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a79      	ldr	r2, [pc, #484]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f973 	bl	80011f4 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff f96f 	bl	80011f4 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e240      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	4a67      	ldr	r2, [pc, #412]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff f94e 	bl	80011f4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f94a 	bl	80011f4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e21b      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f931 	bl	80011f4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff f92d 	bl	80011f4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1fe      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ef      	bne.n	8001f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCC_OscConfig+0x57c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d118      	bne.n	800202e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_OscConfig+0x57c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <HAL_RCC_OscConfig+0x57c>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002008:	f7ff f8f4 	bl	80011f4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002010:	f7ff f8f0 	bl	80011f4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1c1      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_RCC_OscConfig+0x57c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d8>
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002046:	e024      	b.n	8002092 <HAL_RCC_OscConfig+0x522>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d110      	bne.n	8002072 <HAL_RCC_OscConfig+0x502>
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002070:	e00f      	b.n	8002092 <HAL_RCC_OscConfig+0x522>
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff f8ab 	bl	80011f4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff f8a7 	bl	80011f4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e176      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ed      	beq.n	80020a2 <HAL_RCC_OscConfig+0x532>
 80020c6:	e01a      	b.n	80020fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f894 	bl	80011f4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff f890 	bl	80011f4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d906      	bls.n	80020f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e15f      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	4baa      	ldr	r3, [pc, #680]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e8      	bne.n	80020d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4ba5      	ldr	r3, [pc, #660]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4aa4      	ldr	r2, [pc, #656]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002124:	4b9d      	ldr	r3, [pc, #628]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212a:	4a9c      	ldr	r2, [pc, #624]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff f85e 	bl	80011f4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213c:	f7ff f85a 	bl	80011f4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e12b      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214e:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x5cc>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215e:	4b8f      	ldr	r3, [pc, #572]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002164:	4a8d      	ldr	r2, [pc, #564]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff f841 	bl	80011f4 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7ff f83d 	bl	80011f4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10e      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8102 	beq.w	80023a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	f040 80c5 	bne.w	8002334 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021aa:	4b7c      	ldr	r3, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d12c      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	3b01      	subs	r3, #1
 80021ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d123      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d11b      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d113      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d109      	bne.n	8002218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d067      	beq.n	80022e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d062      	beq.n	80022e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0bb      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800222e:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5a      	ldr	r2, [pc, #360]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002238:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800223a:	f7fe ffdb 	bl	80011f4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe ffd7 	bl	80011f4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0a8      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b4e      	ldr	r3, [pc, #312]	; (80023a0 <HAL_RCC_OscConfig+0x830>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002270:	3a01      	subs	r2, #1
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800227a:	0212      	lsls	r2, r2, #8
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	0552      	lsls	r2, r2, #21
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800228e:	0852      	lsrs	r2, r2, #1
 8002290:	3a01      	subs	r2, #1
 8002292:	0652      	lsls	r2, r2, #25
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800229a:	06d2      	lsls	r2, r2, #27
 800229c:	430a      	orrs	r2, r1
 800229e:	493f      	ldr	r1, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3c      	ldr	r2, [pc, #240]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022bc:	f7fe ff9a 	bl	80011f4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff96 	bl	80011f4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e2:	e05f      	b.n	80023a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e05e      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800230c:	f7fe ff72 	bl	80011f4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe ff6e 	bl	80011f4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e03f      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x7a4>
 8002332:	e037      	b.n	80023a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d02d      	beq.n	8002396 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002344:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 8002364:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe ff41 	bl	80011f4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe ff3d 	bl	80011f4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e00e      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_RCC_OscConfig+0x82c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x806>
 8002394:	e006      	b.n	80023a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e005      	b.n	80023a6 <HAL_RCC_OscConfig+0x836>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0c8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b66      	ldr	r3, [pc, #408]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d910      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	4961      	ldr	r1, [pc, #388]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b0      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d04c      	beq.n	800249a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d107      	bne.n	8002418 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002408:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d121      	bne.n	8002458 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e09e      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d115      	bne.n	8002458 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e092      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e086      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e07e      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 0203 	bic.w	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	493f      	ldr	r1, [pc, #252]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246a:	f7fe fec3 	bl	80011f4 <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002470:	e00a      	b.n	8002488 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002472:	f7fe febf 	bl	80011f4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e066      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 020c 	and.w	r2, r3, #12
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	429a      	cmp	r2, r3
 8002498:	d1eb      	bne.n	8002472 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	492c      	ldr	r1, [pc, #176]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d210      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4924      	ldr	r1, [pc, #144]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e036      	b.n	8002556 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4918      	ldr	r1, [pc, #96]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4910      	ldr	r1, [pc, #64]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002526:	f000 f825 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800252a:	4601      	mov	r1, r0
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_ClockConfig+0x1b4>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa21 f303 	lsr.w	r3, r1, r3
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fe02 	bl	8001154 <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	72fb      	strb	r3, [r7, #11]

  return status;
 8002554:	7afb      	ldrb	r3, [r7, #11]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	0800401c 	.word	0x0800401c
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d121      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d11e      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d0:	4a2a      	ldr	r2, [pc, #168]	; (800267c <HAL_RCC_GetSysClockFreq+0x108>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e004      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d133      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0xa4>
 8002612:	2b03      	cmp	r3, #3
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0xaa>
 8002616:	e005      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_GetSysClockFreq+0x10c>)
 800261a:	617b      	str	r3, [r7, #20]
      break;
 800261c:	e005      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_GetSysClockFreq+0x110>)
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	3301      	adds	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	fb02 f203 	mul.w	r2, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_GetSysClockFreq+0x104>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0e5b      	lsrs	r3, r3, #25
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800266a:	69bb      	ldr	r3, [r7, #24]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3724      	adds	r7, #36	; 0x24
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000
 800267c:	08004034 	.word	0x08004034
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200

08002688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	0800402c 	.word	0x0800402c

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d0:	f7ff ffda 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d4:	4601      	mov	r1, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	0800402c 	.word	0x0800402c

080026f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002710:	f7ff f9ca 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 8002714:	6178      	str	r0, [r7, #20]
 8002716:	e014      	b.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff f9ba 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d10b      	bne.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d919      	bls.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2ba0      	cmp	r3, #160	; 0xa0
 8002754:	d902      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002756:	2302      	movs	r3, #2
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e013      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e010      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d902      	bls.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002768:	2303      	movs	r3, #3
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e00a      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d102      	bne.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e004      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d101      	bne.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0207 	bic.w	r2, r3, #7
 800278c:	4909      	ldr	r1, [pc, #36]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c0:	2300      	movs	r3, #0
 80027c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027dc:	d005      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027e8:	e00f      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027ea:	4bac      	ldr	r3, [pc, #688]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4aab      	ldr	r2, [pc, #684]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f6:	e00c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f9cc 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	74fb      	strb	r3, [r7, #19]
      break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002818:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	499d      	ldr	r1, [pc, #628]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8099 	beq.w	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002846:	4b95      	ldr	r3, [pc, #596]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002878:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a88      	ldr	r2, [pc, #544]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002884:	f7fe fcb6 	bl	80011f4 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fcb2 	bl	80011f4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	74fb      	strb	r3, [r7, #19]
        break;
 800289e:	e005      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a0:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d155      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01e      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d019      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ea:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fc72 	bl	80011f4 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fc6e 	bl	80011f4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d902      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	74fb      	strb	r3, [r7, #19]
            break;
 800292a:	e006      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ec      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002940:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294e:	4953      	ldr	r1, [pc, #332]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002956:	e004      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
 800295c:	e001      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7c7b      	ldrb	r3, [r7, #17]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4943      	ldr	r1, [pc, #268]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 020c 	bic.w	r2, r3, #12
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	493a      	ldr	r1, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	4932      	ldr	r1, [pc, #200]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	4929      	ldr	r1, [pc, #164]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4921      	ldr	r1, [pc, #132]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	4918      	ldr	r1, [pc, #96]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4910      	ldr	r1, [pc, #64]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a02      	ldr	r2, [pc, #8]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e015      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f871 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d028      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	492d      	ldr	r1, [pc, #180]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af2:	d106      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afe:	60d3      	str	r3, [r2, #12]
 8002b00:	e011      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f842 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01c      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	4915      	ldr	r1, [pc, #84]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f81f 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	4904      	ldr	r1, [pc, #16]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bb6:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bce:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d044      	beq.n	8002c6c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e041      	b.n	8002c6c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d00c      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x6e>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d013      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x80>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d120      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf8:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11d      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e01a      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c0a:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e013      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1c:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10f      	bne.n	8002c48 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c38:	e006      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3e:	e004      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c40:	bf00      	nop
 8002c42:	e002      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c44:	bf00      	nop
 8002c46:	e000      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c48:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c50:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	430b      	orrs	r3, r1
 8002c66:	4944      	ldr	r1, [pc, #272]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d17c      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fab9 	bl	80011f4 <HAL_GetTick>
 8002c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c84:	e009      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c86:	f7fe fab5 	bl	80011f4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d902      	bls.n	8002c9a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	73fb      	strb	r3, [r7, #15]
        break;
 8002c98:	e005      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ef      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d15f      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d110      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	0211      	lsls	r1, r2, #8
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68d2      	ldr	r2, [r2, #12]
 8002cc8:	06d2      	lsls	r2, r2, #27
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	492a      	ldr	r1, [pc, #168]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	610b      	str	r3, [r1, #16]
 8002cd2:	e027      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d112      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	0211      	lsls	r1, r2, #8
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6912      	ldr	r2, [r2, #16]
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	491f      	ldr	r1, [pc, #124]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	610b      	str	r3, [r1, #16]
 8002cfe:	e011      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6952      	ldr	r2, [r2, #20]
 8002d16:	0852      	lsrs	r2, r2, #1
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	0652      	lsls	r2, r2, #25
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	4916      	ldr	r1, [pc, #88]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fa60 	bl	80011f4 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d36:	e009      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d38:	f7fe fa5c 	bl	80011f4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	73fb      	strb	r3, [r7, #15]
          break;
 8002d4a:	e005      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ef      	beq.n	8002d38 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e040      	b.n	8002e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f80c 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8c0 	bl	8002f40 <UART_SetConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fac4 	bl	8003360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fb4b 	bl	80034a4 <UART_CheckIdleState>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	f040 8081 	bne.w	8002f34 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_UART_Transmit+0x26>
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e079      	b.n	8002f36 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Transmit+0x38>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e072      	b.n	8002f36 <HAL_UART_Transmit+0x11e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2221      	movs	r2, #33	; 0x21
 8002e62:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe f9c6 	bl	80011f4 <HAL_GetTick>
 8002e68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d108      	bne.n	8002e96 <HAL_UART_Transmit+0x7e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e003      	b.n	8002e9e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002ea6:	e02d      	b.n	8002f04 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb3b 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e039      	b.n	8002f36 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	881a      	ldrh	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	3302      	adds	r3, #2
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e008      	b.n	8002ef2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1cb      	bne.n	8002ea8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb07 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e005      	b.n	8002f36 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4bb0      	ldr	r3, [pc, #704]	; (8003230 <UART_SetConfig+0x2f0>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	69f9      	ldr	r1, [r7, #28]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4aa6      	ldr	r2, [pc, #664]	; (8003234 <UART_SetConfig+0x2f4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a9d      	ldr	r2, [pc, #628]	; (8003238 <UART_SetConfig+0x2f8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d121      	bne.n	800300c <UART_SetConfig+0xcc>
 8002fc8:	4b9c      	ldr	r3, [pc, #624]	; (800323c <UART_SetConfig+0x2fc>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d816      	bhi.n	8003004 <UART_SetConfig+0xc4>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x9c>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08002ff9 	.word	0x08002ff9
 8002fe4:	08002ff3 	.word	0x08002ff3
 8002fe8:	08002fff 	.word	0x08002fff
 8002fec:	2301      	movs	r3, #1
 8002fee:	76fb      	strb	r3, [r7, #27]
 8002ff0:	e072      	b.n	80030d8 <UART_SetConfig+0x198>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	76fb      	strb	r3, [r7, #27]
 8002ff6:	e06f      	b.n	80030d8 <UART_SetConfig+0x198>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	76fb      	strb	r3, [r7, #27]
 8002ffc:	e06c      	b.n	80030d8 <UART_SetConfig+0x198>
 8002ffe:	2308      	movs	r3, #8
 8003000:	76fb      	strb	r3, [r7, #27]
 8003002:	e069      	b.n	80030d8 <UART_SetConfig+0x198>
 8003004:	2310      	movs	r3, #16
 8003006:	76fb      	strb	r3, [r7, #27]
 8003008:	bf00      	nop
 800300a:	e065      	b.n	80030d8 <UART_SetConfig+0x198>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a8b      	ldr	r2, [pc, #556]	; (8003240 <UART_SetConfig+0x300>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d134      	bne.n	8003080 <UART_SetConfig+0x140>
 8003016:	4b89      	ldr	r3, [pc, #548]	; (800323c <UART_SetConfig+0x2fc>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d829      	bhi.n	8003078 <UART_SetConfig+0x138>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0xec>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003061 	.word	0x08003061
 8003030:	08003079 	.word	0x08003079
 8003034:	08003079 	.word	0x08003079
 8003038:	08003079 	.word	0x08003079
 800303c:	0800306d 	.word	0x0800306d
 8003040:	08003079 	.word	0x08003079
 8003044:	08003079 	.word	0x08003079
 8003048:	08003079 	.word	0x08003079
 800304c:	08003067 	.word	0x08003067
 8003050:	08003079 	.word	0x08003079
 8003054:	08003079 	.word	0x08003079
 8003058:	08003079 	.word	0x08003079
 800305c:	08003073 	.word	0x08003073
 8003060:	2300      	movs	r3, #0
 8003062:	76fb      	strb	r3, [r7, #27]
 8003064:	e038      	b.n	80030d8 <UART_SetConfig+0x198>
 8003066:	2302      	movs	r3, #2
 8003068:	76fb      	strb	r3, [r7, #27]
 800306a:	e035      	b.n	80030d8 <UART_SetConfig+0x198>
 800306c:	2304      	movs	r3, #4
 800306e:	76fb      	strb	r3, [r7, #27]
 8003070:	e032      	b.n	80030d8 <UART_SetConfig+0x198>
 8003072:	2308      	movs	r3, #8
 8003074:	76fb      	strb	r3, [r7, #27]
 8003076:	e02f      	b.n	80030d8 <UART_SetConfig+0x198>
 8003078:	2310      	movs	r3, #16
 800307a:	76fb      	strb	r3, [r7, #27]
 800307c:	bf00      	nop
 800307e:	e02b      	b.n	80030d8 <UART_SetConfig+0x198>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	; (8003234 <UART_SetConfig+0x2f4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d124      	bne.n	80030d4 <UART_SetConfig+0x194>
 800308a:	4b6c      	ldr	r3, [pc, #432]	; (800323c <UART_SetConfig+0x2fc>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d012      	beq.n	80030c0 <UART_SetConfig+0x180>
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d802      	bhi.n	80030a6 <UART_SetConfig+0x166>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <UART_SetConfig+0x174>
 80030a4:	e012      	b.n	80030cc <UART_SetConfig+0x18c>
 80030a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030aa:	d006      	beq.n	80030ba <UART_SetConfig+0x17a>
 80030ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b0:	d009      	beq.n	80030c6 <UART_SetConfig+0x186>
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x18c>
 80030b4:	2300      	movs	r3, #0
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e00e      	b.n	80030d8 <UART_SetConfig+0x198>
 80030ba:	2302      	movs	r3, #2
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e00b      	b.n	80030d8 <UART_SetConfig+0x198>
 80030c0:	2304      	movs	r3, #4
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	e008      	b.n	80030d8 <UART_SetConfig+0x198>
 80030c6:	2308      	movs	r3, #8
 80030c8:	76fb      	strb	r3, [r7, #27]
 80030ca:	e005      	b.n	80030d8 <UART_SetConfig+0x198>
 80030cc:	2310      	movs	r3, #16
 80030ce:	76fb      	strb	r3, [r7, #27]
 80030d0:	bf00      	nop
 80030d2:	e001      	b.n	80030d8 <UART_SetConfig+0x198>
 80030d4:	2310      	movs	r3, #16
 80030d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <UART_SetConfig+0x2f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d174      	bne.n	80031cc <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e2:	7efb      	ldrb	r3, [r7, #27]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d824      	bhi.n	8003132 <UART_SetConfig+0x1f2>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x1b0>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	08003133 	.word	0x08003133
 80030f8:	0800311d 	.word	0x0800311d
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003123 	.word	0x08003123
 8003104:	08003133 	.word	0x08003133
 8003108:	08003133 	.word	0x08003133
 800310c:	08003133 	.word	0x08003133
 8003110:	0800312b 	.word	0x0800312b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff fac4 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003118:	6178      	str	r0, [r7, #20]
        break;
 800311a:	e00f      	b.n	800313c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <UART_SetConfig+0x304>)
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	e00c      	b.n	800313c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003122:	f7ff fa27 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8003126:	6178      	str	r0, [r7, #20]
        break;
 8003128:	e008      	b.n	800313c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312e:	617b      	str	r3, [r7, #20]
        break;
 8003130:	e004      	b.n	800313c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	76bb      	strb	r3, [r7, #26]
        break;
 800313a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8100 	beq.w	8003344 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d305      	bcc.n	8003160 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	d902      	bls.n	8003166 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	76bb      	strb	r3, [r7, #26]
 8003164:	e0ee      	b.n	8003344 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4619      	mov	r1, r3
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f04f 0400 	mov.w	r4, #0
 8003176:	0214      	lsls	r4, r2, #8
 8003178:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800317c:	020b      	lsls	r3, r1, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	4611      	mov	r1, r2
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	eb13 0b01 	adds.w	fp, r3, r1
 800318e:	eb44 0c02 	adc.w	ip, r4, r2
 8003192:	4658      	mov	r0, fp
 8003194:	4661      	mov	r1, ip
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	461a      	mov	r2, r3
 80031a0:	4623      	mov	r3, r4
 80031a2:	f7fd fa57 	bl	8000654 <__aeabi_uldivmod>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b2:	d308      	bcc.n	80031c6 <UART_SetConfig+0x286>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ba:	d204      	bcs.n	80031c6 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e0be      	b.n	8003344 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	76bb      	strb	r3, [r7, #26]
 80031ca:	e0bb      	b.n	8003344 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d4:	d169      	bne.n	80032aa <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80031d6:	7efb      	ldrb	r3, [r7, #27]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d835      	bhi.n	8003248 <UART_SetConfig+0x308>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x2a4>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003219 	.word	0x08003219
 80031f0:	08003249 	.word	0x08003249
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	08003249 	.word	0x08003249
 80031fc:	08003249 	.word	0x08003249
 8003200:	08003249 	.word	0x08003249
 8003204:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff fa4a 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 800320c:	6178      	str	r0, [r7, #20]
        break;
 800320e:	e020      	b.n	8003252 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff fa5c 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003214:	6178      	str	r0, [r7, #20]
        break;
 8003216:	e01c      	b.n	8003252 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <UART_SetConfig+0x304>)
 800321a:	617b      	str	r3, [r7, #20]
        break;
 800321c:	e019      	b.n	8003252 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7ff f9a9 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8003222:	6178      	str	r0, [r7, #20]
        break;
 8003224:	e015      	b.n	8003252 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	617b      	str	r3, [r7, #20]
        break;
 800322c:	e011      	b.n	8003252 <UART_SetConfig+0x312>
 800322e:	bf00      	nop
 8003230:	efff69f3 	.word	0xefff69f3
 8003234:	40008000 	.word	0x40008000
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	76bb      	strb	r3, [r7, #26]
        break;
 8003250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d075      	beq.n	8003344 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005a      	lsls	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	b29b      	uxth	r3, r3
 800326e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	d916      	bls.n	80032a4 <UART_SetConfig+0x364>
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d212      	bcs.n	80032a4 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f023 030f 	bic.w	r3, r3, #15
 8003286:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	b29a      	uxth	r2, r3
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	4313      	orrs	r3, r2
 8003298:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	89fa      	ldrh	r2, [r7, #14]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e04f      	b.n	8003344 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	76bb      	strb	r3, [r7, #26]
 80032a8:	e04c      	b.n	8003344 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032aa:	7efb      	ldrb	r3, [r7, #27]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d828      	bhi.n	8003302 <UART_SetConfig+0x3c2>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0x378>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	08003303 	.word	0x08003303
 80032c8:	080032f3 	.word	0x080032f3
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003303 	.word	0x08003303
 80032d4:	08003303 	.word	0x08003303
 80032d8:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7ff f9e0 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80032e0:	6178      	str	r0, [r7, #20]
        break;
 80032e2:	e013      	b.n	800330c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7ff f9f2 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80032e8:	6178      	str	r0, [r7, #20]
        break;
 80032ea:	e00f      	b.n	800330c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <UART_SetConfig+0x41c>)
 80032ee:	617b      	str	r3, [r7, #20]
        break;
 80032f0:	e00c      	b.n	800330c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7ff f93f 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80032f6:	6178      	str	r0, [r7, #20]
        break;
 80032f8:	e008      	b.n	800330c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	617b      	str	r3, [r7, #20]
        break;
 8003300:	e004      	b.n	800330c <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	76bb      	strb	r3, [r7, #26]
        break;
 800330a:	bf00      	nop
    }

    if (pclk != 0U)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d018      	beq.n	8003344 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085a      	lsrs	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d908      	bls.n	8003340 <UART_SetConfig+0x400>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d204      	bcs.n	8003340 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	e001      	b.n	8003344 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003350:	7ebb      	ldrb	r3, [r7, #26]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800335c:	00f42400 	.word	0x00f42400

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d10a      	bne.n	8003476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034b2:	f7fd fe9f 	bl	80011f4 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d10e      	bne.n	80034e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f82a 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e020      	b.n	8003526 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d10e      	bne.n	8003510 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f814 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e00a      	b.n	8003526 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	e05d      	b.n	80035fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d059      	beq.n	80035fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7fd fe54 	bl	80011f4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <UART_WaitOnFlagUntilTimeout+0x30>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11b      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800356c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e042      	b.n	800361c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02b      	beq.n	80035fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b2:	d123      	bne.n	80035fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00f      	b.n	800361c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	429a      	cmp	r2, r3
 8003618:	d092      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <__errno>:
 8003624:	4b01      	ldr	r3, [pc, #4]	; (800362c <__errno+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	2000000c 	.word	0x2000000c

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4e0d      	ldr	r6, [pc, #52]	; (8003668 <__libc_init_array+0x38>)
 8003634:	4c0d      	ldr	r4, [pc, #52]	; (800366c <__libc_init_array+0x3c>)
 8003636:	1ba4      	subs	r4, r4, r6
 8003638:	10a4      	asrs	r4, r4, #2
 800363a:	2500      	movs	r5, #0
 800363c:	42a5      	cmp	r5, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	4e0b      	ldr	r6, [pc, #44]	; (8003670 <__libc_init_array+0x40>)
 8003642:	4c0c      	ldr	r4, [pc, #48]	; (8003674 <__libc_init_array+0x44>)
 8003644:	f000 fc88 	bl	8003f58 <_init>
 8003648:	1ba4      	subs	r4, r4, r6
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	2500      	movs	r5, #0
 800364e:	42a5      	cmp	r5, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003658:	4798      	blx	r3
 800365a:	3501      	adds	r5, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003662:	4798      	blx	r3
 8003664:	3501      	adds	r5, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	080040d0 	.word	0x080040d0
 800366c:	080040d0 	.word	0x080040d0
 8003670:	080040d0 	.word	0x080040d0
 8003674:	080040d4 	.word	0x080040d4

08003678 <memset>:
 8003678:	4402      	add	r2, r0
 800367a:	4603      	mov	r3, r0
 800367c:	4293      	cmp	r3, r2
 800367e:	d100      	bne.n	8003682 <memset+0xa>
 8003680:	4770      	bx	lr
 8003682:	f803 1b01 	strb.w	r1, [r3], #1
 8003686:	e7f9      	b.n	800367c <memset+0x4>

08003688 <_puts_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460e      	mov	r6, r1
 800368c:	4605      	mov	r5, r0
 800368e:	b118      	cbz	r0, 8003698 <_puts_r+0x10>
 8003690:	6983      	ldr	r3, [r0, #24]
 8003692:	b90b      	cbnz	r3, 8003698 <_puts_r+0x10>
 8003694:	f000 fa0c 	bl	8003ab0 <__sinit>
 8003698:	69ab      	ldr	r3, [r5, #24]
 800369a:	68ac      	ldr	r4, [r5, #8]
 800369c:	b913      	cbnz	r3, 80036a4 <_puts_r+0x1c>
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 fa06 	bl	8003ab0 <__sinit>
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <_puts_r+0xac>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d117      	bne.n	80036da <_puts_r+0x52>
 80036aa:	686c      	ldr	r4, [r5, #4]
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	071b      	lsls	r3, r3, #28
 80036b0:	d51d      	bpl.n	80036ee <_puts_r+0x66>
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	b1db      	cbz	r3, 80036ee <_puts_r+0x66>
 80036b6:	3e01      	subs	r6, #1
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036be:	3b01      	subs	r3, #1
 80036c0:	60a3      	str	r3, [r4, #8]
 80036c2:	b9e9      	cbnz	r1, 8003700 <_puts_r+0x78>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da2e      	bge.n	8003726 <_puts_r+0x9e>
 80036c8:	4622      	mov	r2, r4
 80036ca:	210a      	movs	r1, #10
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 f83f 	bl	8003750 <__swbuf_r>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d011      	beq.n	80036fa <_puts_r+0x72>
 80036d6:	200a      	movs	r0, #10
 80036d8:	e011      	b.n	80036fe <_puts_r+0x76>
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <_puts_r+0xb0>)
 80036dc:	429c      	cmp	r4, r3
 80036de:	d101      	bne.n	80036e4 <_puts_r+0x5c>
 80036e0:	68ac      	ldr	r4, [r5, #8]
 80036e2:	e7e3      	b.n	80036ac <_puts_r+0x24>
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <_puts_r+0xb4>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	bf08      	it	eq
 80036ea:	68ec      	ldreq	r4, [r5, #12]
 80036ec:	e7de      	b.n	80036ac <_puts_r+0x24>
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f87f 	bl	80037f4 <__swsetup_r>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d0dd      	beq.n	80036b6 <_puts_r+0x2e>
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	2b00      	cmp	r3, #0
 8003702:	da04      	bge.n	800370e <_puts_r+0x86>
 8003704:	69a2      	ldr	r2, [r4, #24]
 8003706:	429a      	cmp	r2, r3
 8003708:	dc06      	bgt.n	8003718 <_puts_r+0x90>
 800370a:	290a      	cmp	r1, #10
 800370c:	d004      	beq.n	8003718 <_puts_r+0x90>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	7019      	strb	r1, [r3, #0]
 8003716:	e7cf      	b.n	80036b8 <_puts_r+0x30>
 8003718:	4622      	mov	r2, r4
 800371a:	4628      	mov	r0, r5
 800371c:	f000 f818 	bl	8003750 <__swbuf_r>
 8003720:	3001      	adds	r0, #1
 8003722:	d1c9      	bne.n	80036b8 <_puts_r+0x30>
 8003724:	e7e9      	b.n	80036fa <_puts_r+0x72>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	200a      	movs	r0, #10
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	6022      	str	r2, [r4, #0]
 800372e:	7018      	strb	r0, [r3, #0]
 8003730:	e7e5      	b.n	80036fe <_puts_r+0x76>
 8003732:	bf00      	nop
 8003734:	08004088 	.word	0x08004088
 8003738:	080040a8 	.word	0x080040a8
 800373c:	08004068 	.word	0x08004068

08003740 <puts>:
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <puts+0xc>)
 8003742:	4601      	mov	r1, r0
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f7ff bf9f 	b.w	8003688 <_puts_r>
 800374a:	bf00      	nop
 800374c:	2000000c 	.word	0x2000000c

08003750 <__swbuf_r>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	460e      	mov	r6, r1
 8003754:	4614      	mov	r4, r2
 8003756:	4605      	mov	r5, r0
 8003758:	b118      	cbz	r0, 8003762 <__swbuf_r+0x12>
 800375a:	6983      	ldr	r3, [r0, #24]
 800375c:	b90b      	cbnz	r3, 8003762 <__swbuf_r+0x12>
 800375e:	f000 f9a7 	bl	8003ab0 <__sinit>
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <__swbuf_r+0x98>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d12a      	bne.n	80037be <__swbuf_r+0x6e>
 8003768:	686c      	ldr	r4, [r5, #4]
 800376a:	69a3      	ldr	r3, [r4, #24]
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	071a      	lsls	r2, r3, #28
 8003772:	d52e      	bpl.n	80037d2 <__swbuf_r+0x82>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	b363      	cbz	r3, 80037d2 <__swbuf_r+0x82>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	1ac0      	subs	r0, r0, r3
 800377e:	6963      	ldr	r3, [r4, #20]
 8003780:	b2f6      	uxtb	r6, r6
 8003782:	4283      	cmp	r3, r0
 8003784:	4637      	mov	r7, r6
 8003786:	dc04      	bgt.n	8003792 <__swbuf_r+0x42>
 8003788:	4621      	mov	r1, r4
 800378a:	4628      	mov	r0, r5
 800378c:	f000 f926 	bl	80039dc <_fflush_r>
 8003790:	bb28      	cbnz	r0, 80037de <__swbuf_r+0x8e>
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	3b01      	subs	r3, #1
 8003796:	60a3      	str	r3, [r4, #8]
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	701e      	strb	r6, [r3, #0]
 80037a0:	6963      	ldr	r3, [r4, #20]
 80037a2:	3001      	adds	r0, #1
 80037a4:	4283      	cmp	r3, r0
 80037a6:	d004      	beq.n	80037b2 <__swbuf_r+0x62>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	07db      	lsls	r3, r3, #31
 80037ac:	d519      	bpl.n	80037e2 <__swbuf_r+0x92>
 80037ae:	2e0a      	cmp	r6, #10
 80037b0:	d117      	bne.n	80037e2 <__swbuf_r+0x92>
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f911 	bl	80039dc <_fflush_r>
 80037ba:	b190      	cbz	r0, 80037e2 <__swbuf_r+0x92>
 80037bc:	e00f      	b.n	80037de <__swbuf_r+0x8e>
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <__swbuf_r+0x9c>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d101      	bne.n	80037c8 <__swbuf_r+0x78>
 80037c4:	68ac      	ldr	r4, [r5, #8]
 80037c6:	e7d0      	b.n	800376a <__swbuf_r+0x1a>
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <__swbuf_r+0xa0>)
 80037ca:	429c      	cmp	r4, r3
 80037cc:	bf08      	it	eq
 80037ce:	68ec      	ldreq	r4, [r5, #12]
 80037d0:	e7cb      	b.n	800376a <__swbuf_r+0x1a>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 f80d 	bl	80037f4 <__swsetup_r>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d0cc      	beq.n	8003778 <__swbuf_r+0x28>
 80037de:	f04f 37ff 	mov.w	r7, #4294967295
 80037e2:	4638      	mov	r0, r7
 80037e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08004088 	.word	0x08004088
 80037ec:	080040a8 	.word	0x080040a8
 80037f0:	08004068 	.word	0x08004068

080037f4 <__swsetup_r>:
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <__swsetup_r+0xcc>)
 80037f6:	b570      	push	{r4, r5, r6, lr}
 80037f8:	681d      	ldr	r5, [r3, #0]
 80037fa:	4606      	mov	r6, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	b125      	cbz	r5, 800380a <__swsetup_r+0x16>
 8003800:	69ab      	ldr	r3, [r5, #24]
 8003802:	b913      	cbnz	r3, 800380a <__swsetup_r+0x16>
 8003804:	4628      	mov	r0, r5
 8003806:	f000 f953 	bl	8003ab0 <__sinit>
 800380a:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <__swsetup_r+0xd0>)
 800380c:	429c      	cmp	r4, r3
 800380e:	d10f      	bne.n	8003830 <__swsetup_r+0x3c>
 8003810:	686c      	ldr	r4, [r5, #4]
 8003812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003816:	b29a      	uxth	r2, r3
 8003818:	0715      	lsls	r5, r2, #28
 800381a:	d42c      	bmi.n	8003876 <__swsetup_r+0x82>
 800381c:	06d0      	lsls	r0, r2, #27
 800381e:	d411      	bmi.n	8003844 <__swsetup_r+0x50>
 8003820:	2209      	movs	r2, #9
 8003822:	6032      	str	r2, [r6, #0]
 8003824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	f04f 30ff 	mov.w	r0, #4294967295
 800382e:	e03e      	b.n	80038ae <__swsetup_r+0xba>
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <__swsetup_r+0xd4>)
 8003832:	429c      	cmp	r4, r3
 8003834:	d101      	bne.n	800383a <__swsetup_r+0x46>
 8003836:	68ac      	ldr	r4, [r5, #8]
 8003838:	e7eb      	b.n	8003812 <__swsetup_r+0x1e>
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <__swsetup_r+0xd8>)
 800383c:	429c      	cmp	r4, r3
 800383e:	bf08      	it	eq
 8003840:	68ec      	ldreq	r4, [r5, #12]
 8003842:	e7e6      	b.n	8003812 <__swsetup_r+0x1e>
 8003844:	0751      	lsls	r1, r2, #29
 8003846:	d512      	bpl.n	800386e <__swsetup_r+0x7a>
 8003848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384a:	b141      	cbz	r1, 800385e <__swsetup_r+0x6a>
 800384c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003850:	4299      	cmp	r1, r3
 8003852:	d002      	beq.n	800385a <__swsetup_r+0x66>
 8003854:	4630      	mov	r0, r6
 8003856:	f000 fa19 	bl	8003c8c <_free_r>
 800385a:	2300      	movs	r3, #0
 800385c:	6363      	str	r3, [r4, #52]	; 0x34
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	b94b      	cbnz	r3, 800388e <__swsetup_r+0x9a>
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003884:	d003      	beq.n	800388e <__swsetup_r+0x9a>
 8003886:	4621      	mov	r1, r4
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f9bf 	bl	8003c0c <__smakebuf_r>
 800388e:	89a2      	ldrh	r2, [r4, #12]
 8003890:	f012 0301 	ands.w	r3, r2, #1
 8003894:	d00c      	beq.n	80038b0 <__swsetup_r+0xbc>
 8003896:	2300      	movs	r3, #0
 8003898:	60a3      	str	r3, [r4, #8]
 800389a:	6963      	ldr	r3, [r4, #20]
 800389c:	425b      	negs	r3, r3
 800389e:	61a3      	str	r3, [r4, #24]
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	b953      	cbnz	r3, 80038ba <__swsetup_r+0xc6>
 80038a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80038ac:	d1ba      	bne.n	8003824 <__swsetup_r+0x30>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	0792      	lsls	r2, r2, #30
 80038b2:	bf58      	it	pl
 80038b4:	6963      	ldrpl	r3, [r4, #20]
 80038b6:	60a3      	str	r3, [r4, #8]
 80038b8:	e7f2      	b.n	80038a0 <__swsetup_r+0xac>
 80038ba:	2000      	movs	r0, #0
 80038bc:	e7f7      	b.n	80038ae <__swsetup_r+0xba>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	08004088 	.word	0x08004088
 80038c8:	080040a8 	.word	0x080040a8
 80038cc:	08004068 	.word	0x08004068

080038d0 <__sflush_r>:
 80038d0:	898a      	ldrh	r2, [r1, #12]
 80038d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d6:	4605      	mov	r5, r0
 80038d8:	0710      	lsls	r0, r2, #28
 80038da:	460c      	mov	r4, r1
 80038dc:	d458      	bmi.n	8003990 <__sflush_r+0xc0>
 80038de:	684b      	ldr	r3, [r1, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	dc05      	bgt.n	80038f0 <__sflush_r+0x20>
 80038e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	dc02      	bgt.n	80038f0 <__sflush_r+0x20>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d0f9      	beq.n	80038ea <__sflush_r+0x1a>
 80038f6:	2300      	movs	r3, #0
 80038f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038fc:	682f      	ldr	r7, [r5, #0]
 80038fe:	6a21      	ldr	r1, [r4, #32]
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	d032      	beq.n	800396a <__sflush_r+0x9a>
 8003904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	075a      	lsls	r2, r3, #29
 800390a:	d505      	bpl.n	8003918 <__sflush_r+0x48>
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	1ac0      	subs	r0, r0, r3
 8003910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003912:	b10b      	cbz	r3, 8003918 <__sflush_r+0x48>
 8003914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003916:	1ac0      	subs	r0, r0, r3
 8003918:	2300      	movs	r3, #0
 800391a:	4602      	mov	r2, r0
 800391c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800391e:	6a21      	ldr	r1, [r4, #32]
 8003920:	4628      	mov	r0, r5
 8003922:	47b0      	blx	r6
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	d106      	bne.n	8003938 <__sflush_r+0x68>
 800392a:	6829      	ldr	r1, [r5, #0]
 800392c:	291d      	cmp	r1, #29
 800392e:	d848      	bhi.n	80039c2 <__sflush_r+0xf2>
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <__sflush_r+0x108>)
 8003932:	40ca      	lsrs	r2, r1
 8003934:	07d6      	lsls	r6, r2, #31
 8003936:	d544      	bpl.n	80039c2 <__sflush_r+0xf2>
 8003938:	2200      	movs	r2, #0
 800393a:	6062      	str	r2, [r4, #4]
 800393c:	04d9      	lsls	r1, r3, #19
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	6022      	str	r2, [r4, #0]
 8003942:	d504      	bpl.n	800394e <__sflush_r+0x7e>
 8003944:	1c42      	adds	r2, r0, #1
 8003946:	d101      	bne.n	800394c <__sflush_r+0x7c>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b903      	cbnz	r3, 800394e <__sflush_r+0x7e>
 800394c:	6560      	str	r0, [r4, #84]	; 0x54
 800394e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003950:	602f      	str	r7, [r5, #0]
 8003952:	2900      	cmp	r1, #0
 8003954:	d0c9      	beq.n	80038ea <__sflush_r+0x1a>
 8003956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800395a:	4299      	cmp	r1, r3
 800395c:	d002      	beq.n	8003964 <__sflush_r+0x94>
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f994 	bl	8003c8c <_free_r>
 8003964:	2000      	movs	r0, #0
 8003966:	6360      	str	r0, [r4, #52]	; 0x34
 8003968:	e7c0      	b.n	80038ec <__sflush_r+0x1c>
 800396a:	2301      	movs	r3, #1
 800396c:	4628      	mov	r0, r5
 800396e:	47b0      	blx	r6
 8003970:	1c41      	adds	r1, r0, #1
 8003972:	d1c8      	bne.n	8003906 <__sflush_r+0x36>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0c5      	beq.n	8003906 <__sflush_r+0x36>
 800397a:	2b1d      	cmp	r3, #29
 800397c:	d001      	beq.n	8003982 <__sflush_r+0xb2>
 800397e:	2b16      	cmp	r3, #22
 8003980:	d101      	bne.n	8003986 <__sflush_r+0xb6>
 8003982:	602f      	str	r7, [r5, #0]
 8003984:	e7b1      	b.n	80038ea <__sflush_r+0x1a>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398c:	81a3      	strh	r3, [r4, #12]
 800398e:	e7ad      	b.n	80038ec <__sflush_r+0x1c>
 8003990:	690f      	ldr	r7, [r1, #16]
 8003992:	2f00      	cmp	r7, #0
 8003994:	d0a9      	beq.n	80038ea <__sflush_r+0x1a>
 8003996:	0793      	lsls	r3, r2, #30
 8003998:	680e      	ldr	r6, [r1, #0]
 800399a:	bf08      	it	eq
 800399c:	694b      	ldreq	r3, [r1, #20]
 800399e:	600f      	str	r7, [r1, #0]
 80039a0:	bf18      	it	ne
 80039a2:	2300      	movne	r3, #0
 80039a4:	eba6 0807 	sub.w	r8, r6, r7
 80039a8:	608b      	str	r3, [r1, #8]
 80039aa:	f1b8 0f00 	cmp.w	r8, #0
 80039ae:	dd9c      	ble.n	80038ea <__sflush_r+0x1a>
 80039b0:	4643      	mov	r3, r8
 80039b2:	463a      	mov	r2, r7
 80039b4:	6a21      	ldr	r1, [r4, #32]
 80039b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039b8:	4628      	mov	r0, r5
 80039ba:	47b0      	blx	r6
 80039bc:	2800      	cmp	r0, #0
 80039be:	dc06      	bgt.n	80039ce <__sflush_r+0xfe>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	e78e      	b.n	80038ec <__sflush_r+0x1c>
 80039ce:	4407      	add	r7, r0
 80039d0:	eba8 0800 	sub.w	r8, r8, r0
 80039d4:	e7e9      	b.n	80039aa <__sflush_r+0xda>
 80039d6:	bf00      	nop
 80039d8:	20400001 	.word	0x20400001

080039dc <_fflush_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	690b      	ldr	r3, [r1, #16]
 80039e0:	4605      	mov	r5, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	b1db      	cbz	r3, 8003a1e <_fflush_r+0x42>
 80039e6:	b118      	cbz	r0, 80039f0 <_fflush_r+0x14>
 80039e8:	6983      	ldr	r3, [r0, #24]
 80039ea:	b90b      	cbnz	r3, 80039f0 <_fflush_r+0x14>
 80039ec:	f000 f860 	bl	8003ab0 <__sinit>
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <_fflush_r+0x48>)
 80039f2:	429c      	cmp	r4, r3
 80039f4:	d109      	bne.n	8003a0a <_fflush_r+0x2e>
 80039f6:	686c      	ldr	r4, [r5, #4]
 80039f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fc:	b17b      	cbz	r3, 8003a1e <_fflush_r+0x42>
 80039fe:	4621      	mov	r1, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a06:	f7ff bf63 	b.w	80038d0 <__sflush_r>
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <_fflush_r+0x4c>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d101      	bne.n	8003a14 <_fflush_r+0x38>
 8003a10:	68ac      	ldr	r4, [r5, #8]
 8003a12:	e7f1      	b.n	80039f8 <_fflush_r+0x1c>
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <_fflush_r+0x50>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	bf08      	it	eq
 8003a1a:	68ec      	ldreq	r4, [r5, #12]
 8003a1c:	e7ec      	b.n	80039f8 <_fflush_r+0x1c>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	bf00      	nop
 8003a24:	08004088 	.word	0x08004088
 8003a28:	080040a8 	.word	0x080040a8
 8003a2c:	08004068 	.word	0x08004068

08003a30 <std>:
 8003a30:	2300      	movs	r3, #0
 8003a32:	b510      	push	{r4, lr}
 8003a34:	4604      	mov	r4, r0
 8003a36:	e9c0 3300 	strd	r3, r3, [r0]
 8003a3a:	6083      	str	r3, [r0, #8]
 8003a3c:	8181      	strh	r1, [r0, #12]
 8003a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a40:	81c2      	strh	r2, [r0, #14]
 8003a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a46:	6183      	str	r3, [r0, #24]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	305c      	adds	r0, #92	; 0x5c
 8003a4e:	f7ff fe13 	bl	8003678 <memset>
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <std+0x38>)
 8003a54:	6263      	str	r3, [r4, #36]	; 0x24
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <std+0x3c>)
 8003a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <std+0x40>)
 8003a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <std+0x44>)
 8003a60:	6224      	str	r4, [r4, #32]
 8003a62:	6323      	str	r3, [r4, #48]	; 0x30
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	bf00      	nop
 8003a68:	08003dfd 	.word	0x08003dfd
 8003a6c:	08003e1f 	.word	0x08003e1f
 8003a70:	08003e57 	.word	0x08003e57
 8003a74:	08003e7b 	.word	0x08003e7b

08003a78 <_cleanup_r>:
 8003a78:	4901      	ldr	r1, [pc, #4]	; (8003a80 <_cleanup_r+0x8>)
 8003a7a:	f000 b885 	b.w	8003b88 <_fwalk_reent>
 8003a7e:	bf00      	nop
 8003a80:	080039dd 	.word	0x080039dd

08003a84 <__sfmoreglue>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	1e4a      	subs	r2, r1, #1
 8003a88:	2568      	movs	r5, #104	; 0x68
 8003a8a:	4355      	muls	r5, r2
 8003a8c:	460e      	mov	r6, r1
 8003a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a92:	f000 f949 	bl	8003d28 <_malloc_r>
 8003a96:	4604      	mov	r4, r0
 8003a98:	b140      	cbz	r0, 8003aac <__sfmoreglue+0x28>
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8003aa0:	300c      	adds	r0, #12
 8003aa2:	60a0      	str	r0, [r4, #8]
 8003aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003aa8:	f7ff fde6 	bl	8003678 <memset>
 8003aac:	4620      	mov	r0, r4
 8003aae:	bd70      	pop	{r4, r5, r6, pc}

08003ab0 <__sinit>:
 8003ab0:	6983      	ldr	r3, [r0, #24]
 8003ab2:	b510      	push	{r4, lr}
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	bb33      	cbnz	r3, 8003b06 <__sinit+0x56>
 8003ab8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003abc:	6503      	str	r3, [r0, #80]	; 0x50
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <__sinit+0x58>)
 8003ac0:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <__sinit+0x5c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6282      	str	r2, [r0, #40]	; 0x28
 8003ac6:	4298      	cmp	r0, r3
 8003ac8:	bf04      	itt	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	6183      	streq	r3, [r0, #24]
 8003ace:	f000 f81f 	bl	8003b10 <__sfp>
 8003ad2:	6060      	str	r0, [r4, #4]
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 f81b 	bl	8003b10 <__sfp>
 8003ada:	60a0      	str	r0, [r4, #8]
 8003adc:	4620      	mov	r0, r4
 8003ade:	f000 f817 	bl	8003b10 <__sfp>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60e0      	str	r0, [r4, #12]
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	6860      	ldr	r0, [r4, #4]
 8003aea:	f7ff ffa1 	bl	8003a30 <std>
 8003aee:	2201      	movs	r2, #1
 8003af0:	2109      	movs	r1, #9
 8003af2:	68a0      	ldr	r0, [r4, #8]
 8003af4:	f7ff ff9c 	bl	8003a30 <std>
 8003af8:	2202      	movs	r2, #2
 8003afa:	2112      	movs	r1, #18
 8003afc:	68e0      	ldr	r0, [r4, #12]
 8003afe:	f7ff ff97 	bl	8003a30 <std>
 8003b02:	2301      	movs	r3, #1
 8003b04:	61a3      	str	r3, [r4, #24]
 8003b06:	bd10      	pop	{r4, pc}
 8003b08:	08004064 	.word	0x08004064
 8003b0c:	08003a79 	.word	0x08003a79

08003b10 <__sfp>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <__sfp+0x70>)
 8003b14:	681e      	ldr	r6, [r3, #0]
 8003b16:	69b3      	ldr	r3, [r6, #24]
 8003b18:	4607      	mov	r7, r0
 8003b1a:	b913      	cbnz	r3, 8003b22 <__sfp+0x12>
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7ff ffc7 	bl	8003ab0 <__sinit>
 8003b22:	3648      	adds	r6, #72	; 0x48
 8003b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	d503      	bpl.n	8003b34 <__sfp+0x24>
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	b133      	cbz	r3, 8003b3e <__sfp+0x2e>
 8003b30:	6836      	ldr	r6, [r6, #0]
 8003b32:	e7f7      	b.n	8003b24 <__sfp+0x14>
 8003b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b38:	b16d      	cbz	r5, 8003b56 <__sfp+0x46>
 8003b3a:	3468      	adds	r4, #104	; 0x68
 8003b3c:	e7f4      	b.n	8003b28 <__sfp+0x18>
 8003b3e:	2104      	movs	r1, #4
 8003b40:	4638      	mov	r0, r7
 8003b42:	f7ff ff9f 	bl	8003a84 <__sfmoreglue>
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1f1      	bne.n	8003b30 <__sfp+0x20>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4604      	mov	r4, r0
 8003b52:	4620      	mov	r0, r4
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <__sfp+0x74>)
 8003b58:	6665      	str	r5, [r4, #100]	; 0x64
 8003b5a:	e9c4 5500 	strd	r5, r5, [r4]
 8003b5e:	60a5      	str	r5, [r4, #8]
 8003b60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003b64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b70:	f7ff fd82 	bl	8003678 <memset>
 8003b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b7c:	e7e9      	b.n	8003b52 <__sfp+0x42>
 8003b7e:	bf00      	nop
 8003b80:	08004064 	.word	0x08004064
 8003b84:	ffff0001 	.word	0xffff0001

08003b88 <_fwalk_reent>:
 8003b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	4689      	mov	r9, r1
 8003b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b94:	2600      	movs	r6, #0
 8003b96:	b914      	cbnz	r4, 8003b9e <_fwalk_reent+0x16>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ba2:	3f01      	subs	r7, #1
 8003ba4:	d501      	bpl.n	8003baa <_fwalk_reent+0x22>
 8003ba6:	6824      	ldr	r4, [r4, #0]
 8003ba8:	e7f5      	b.n	8003b96 <_fwalk_reent+0xe>
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d907      	bls.n	8003bc0 <_fwalk_reent+0x38>
 8003bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	d003      	beq.n	8003bc0 <_fwalk_reent+0x38>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4640      	mov	r0, r8
 8003bbc:	47c8      	blx	r9
 8003bbe:	4306      	orrs	r6, r0
 8003bc0:	3568      	adds	r5, #104	; 0x68
 8003bc2:	e7ee      	b.n	8003ba2 <_fwalk_reent+0x1a>

08003bc4 <__swhatbuf_r>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	b096      	sub	sp, #88	; 0x58
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	da07      	bge.n	8003be6 <__swhatbuf_r+0x22>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	89b3      	ldrh	r3, [r6, #12]
 8003bdc:	061a      	lsls	r2, r3, #24
 8003bde:	d410      	bmi.n	8003c02 <__swhatbuf_r+0x3e>
 8003be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be4:	e00e      	b.n	8003c04 <__swhatbuf_r+0x40>
 8003be6:	466a      	mov	r2, sp
 8003be8:	f000 f96e 	bl	8003ec8 <_fstat_r>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	dbf2      	blt.n	8003bd6 <__swhatbuf_r+0x12>
 8003bf0:	9a01      	ldr	r2, [sp, #4]
 8003bf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bfa:	425a      	negs	r2, r3
 8003bfc:	415a      	adcs	r2, r3
 8003bfe:	602a      	str	r2, [r5, #0]
 8003c00:	e7ee      	b.n	8003be0 <__swhatbuf_r+0x1c>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	2000      	movs	r0, #0
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	b016      	add	sp, #88	; 0x58
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}

08003c0c <__smakebuf_r>:
 8003c0c:	898b      	ldrh	r3, [r1, #12]
 8003c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c10:	079d      	lsls	r5, r3, #30
 8003c12:	4606      	mov	r6, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	d507      	bpl.n	8003c28 <__smakebuf_r+0x1c>
 8003c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	6123      	str	r3, [r4, #16]
 8003c20:	2301      	movs	r3, #1
 8003c22:	6163      	str	r3, [r4, #20]
 8003c24:	b002      	add	sp, #8
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	ab01      	add	r3, sp, #4
 8003c2a:	466a      	mov	r2, sp
 8003c2c:	f7ff ffca 	bl	8003bc4 <__swhatbuf_r>
 8003c30:	9900      	ldr	r1, [sp, #0]
 8003c32:	4605      	mov	r5, r0
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f877 	bl	8003d28 <_malloc_r>
 8003c3a:	b948      	cbnz	r0, 8003c50 <__smakebuf_r+0x44>
 8003c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c40:	059a      	lsls	r2, r3, #22
 8003c42:	d4ef      	bmi.n	8003c24 <__smakebuf_r+0x18>
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e7e3      	b.n	8003c18 <__smakebuf_r+0xc>
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <__smakebuf_r+0x7c>)
 8003c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	6020      	str	r0, [r4, #0]
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	9b00      	ldr	r3, [sp, #0]
 8003c60:	6163      	str	r3, [r4, #20]
 8003c62:	9b01      	ldr	r3, [sp, #4]
 8003c64:	6120      	str	r0, [r4, #16]
 8003c66:	b15b      	cbz	r3, 8003c80 <__smakebuf_r+0x74>
 8003c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f000 f93d 	bl	8003eec <_isatty_r>
 8003c72:	b128      	cbz	r0, 8003c80 <__smakebuf_r+0x74>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	431d      	orrs	r5, r3
 8003c84:	81a5      	strh	r5, [r4, #12]
 8003c86:	e7cd      	b.n	8003c24 <__smakebuf_r+0x18>
 8003c88:	08003a79 	.word	0x08003a79

08003c8c <_free_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4605      	mov	r5, r0
 8003c90:	2900      	cmp	r1, #0
 8003c92:	d045      	beq.n	8003d20 <_free_r+0x94>
 8003c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c98:	1f0c      	subs	r4, r1, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfb8      	it	lt
 8003c9e:	18e4      	addlt	r4, r4, r3
 8003ca0:	f000 f946 	bl	8003f30 <__malloc_lock>
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <_free_r+0x98>)
 8003ca6:	6813      	ldr	r3, [r2, #0]
 8003ca8:	4610      	mov	r0, r2
 8003caa:	b933      	cbnz	r3, 8003cba <_free_r+0x2e>
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	6014      	str	r4, [r2, #0]
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb6:	f000 b93c 	b.w	8003f32 <__malloc_unlock>
 8003cba:	42a3      	cmp	r3, r4
 8003cbc:	d90c      	bls.n	8003cd8 <_free_r+0x4c>
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	1862      	adds	r2, r4, r1
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bf04      	itt	eq
 8003cc6:	681a      	ldreq	r2, [r3, #0]
 8003cc8:	685b      	ldreq	r3, [r3, #4]
 8003cca:	6063      	str	r3, [r4, #4]
 8003ccc:	bf04      	itt	eq
 8003cce:	1852      	addeq	r2, r2, r1
 8003cd0:	6022      	streq	r2, [r4, #0]
 8003cd2:	6004      	str	r4, [r0, #0]
 8003cd4:	e7ec      	b.n	8003cb0 <_free_r+0x24>
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	b10a      	cbz	r2, 8003ce0 <_free_r+0x54>
 8003cdc:	42a2      	cmp	r2, r4
 8003cde:	d9fa      	bls.n	8003cd6 <_free_r+0x4a>
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	1858      	adds	r0, r3, r1
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d10b      	bne.n	8003d00 <_free_r+0x74>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	4401      	add	r1, r0
 8003cec:	1858      	adds	r0, r3, r1
 8003cee:	4282      	cmp	r2, r0
 8003cf0:	6019      	str	r1, [r3, #0]
 8003cf2:	d1dd      	bne.n	8003cb0 <_free_r+0x24>
 8003cf4:	6810      	ldr	r0, [r2, #0]
 8003cf6:	6852      	ldr	r2, [r2, #4]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	6019      	str	r1, [r3, #0]
 8003cfe:	e7d7      	b.n	8003cb0 <_free_r+0x24>
 8003d00:	d902      	bls.n	8003d08 <_free_r+0x7c>
 8003d02:	230c      	movs	r3, #12
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	e7d3      	b.n	8003cb0 <_free_r+0x24>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	bf04      	itt	eq
 8003d10:	6811      	ldreq	r1, [r2, #0]
 8003d12:	6852      	ldreq	r2, [r2, #4]
 8003d14:	6062      	str	r2, [r4, #4]
 8003d16:	bf04      	itt	eq
 8003d18:	1809      	addeq	r1, r1, r0
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	605c      	str	r4, [r3, #4]
 8003d1e:	e7c7      	b.n	8003cb0 <_free_r+0x24>
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000090 	.word	0x20000090

08003d28 <_malloc_r>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	1ccd      	adds	r5, r1, #3
 8003d2c:	f025 0503 	bic.w	r5, r5, #3
 8003d30:	3508      	adds	r5, #8
 8003d32:	2d0c      	cmp	r5, #12
 8003d34:	bf38      	it	cc
 8003d36:	250c      	movcc	r5, #12
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	db01      	blt.n	8003d42 <_malloc_r+0x1a>
 8003d3e:	42a9      	cmp	r1, r5
 8003d40:	d903      	bls.n	8003d4a <_malloc_r+0x22>
 8003d42:	230c      	movs	r3, #12
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	2000      	movs	r0, #0
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	f000 f8f1 	bl	8003f30 <__malloc_lock>
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <_malloc_r+0xac>)
 8003d50:	6814      	ldr	r4, [r2, #0]
 8003d52:	4621      	mov	r1, r4
 8003d54:	b991      	cbnz	r1, 8003d7c <_malloc_r+0x54>
 8003d56:	4c20      	ldr	r4, [pc, #128]	; (8003dd8 <_malloc_r+0xb0>)
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	b91b      	cbnz	r3, 8003d64 <_malloc_r+0x3c>
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f83d 	bl	8003ddc <_sbrk_r>
 8003d62:	6020      	str	r0, [r4, #0]
 8003d64:	4629      	mov	r1, r5
 8003d66:	4630      	mov	r0, r6
 8003d68:	f000 f838 	bl	8003ddc <_sbrk_r>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d124      	bne.n	8003dba <_malloc_r+0x92>
 8003d70:	230c      	movs	r3, #12
 8003d72:	6033      	str	r3, [r6, #0]
 8003d74:	4630      	mov	r0, r6
 8003d76:	f000 f8dc 	bl	8003f32 <__malloc_unlock>
 8003d7a:	e7e4      	b.n	8003d46 <_malloc_r+0x1e>
 8003d7c:	680b      	ldr	r3, [r1, #0]
 8003d7e:	1b5b      	subs	r3, r3, r5
 8003d80:	d418      	bmi.n	8003db4 <_malloc_r+0x8c>
 8003d82:	2b0b      	cmp	r3, #11
 8003d84:	d90f      	bls.n	8003da6 <_malloc_r+0x7e>
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	50cd      	str	r5, [r1, r3]
 8003d8a:	18cc      	adds	r4, r1, r3
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f8d0 	bl	8003f32 <__malloc_unlock>
 8003d92:	f104 000b 	add.w	r0, r4, #11
 8003d96:	1d23      	adds	r3, r4, #4
 8003d98:	f020 0007 	bic.w	r0, r0, #7
 8003d9c:	1ac3      	subs	r3, r0, r3
 8003d9e:	d0d3      	beq.n	8003d48 <_malloc_r+0x20>
 8003da0:	425a      	negs	r2, r3
 8003da2:	50e2      	str	r2, [r4, r3]
 8003da4:	e7d0      	b.n	8003d48 <_malloc_r+0x20>
 8003da6:	428c      	cmp	r4, r1
 8003da8:	684b      	ldr	r3, [r1, #4]
 8003daa:	bf16      	itet	ne
 8003dac:	6063      	strne	r3, [r4, #4]
 8003dae:	6013      	streq	r3, [r2, #0]
 8003db0:	460c      	movne	r4, r1
 8003db2:	e7eb      	b.n	8003d8c <_malloc_r+0x64>
 8003db4:	460c      	mov	r4, r1
 8003db6:	6849      	ldr	r1, [r1, #4]
 8003db8:	e7cc      	b.n	8003d54 <_malloc_r+0x2c>
 8003dba:	1cc4      	adds	r4, r0, #3
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d005      	beq.n	8003dd0 <_malloc_r+0xa8>
 8003dc4:	1a21      	subs	r1, r4, r0
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f808 	bl	8003ddc <_sbrk_r>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d0cf      	beq.n	8003d70 <_malloc_r+0x48>
 8003dd0:	6025      	str	r5, [r4, #0]
 8003dd2:	e7db      	b.n	8003d8c <_malloc_r+0x64>
 8003dd4:	20000090 	.word	0x20000090
 8003dd8:	20000094 	.word	0x20000094

08003ddc <_sbrk_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4c06      	ldr	r4, [pc, #24]	; (8003df8 <_sbrk_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4605      	mov	r5, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	f7fd f906 	bl	8000ff8 <_sbrk>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_sbrk_r+0x1a>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_sbrk_r+0x1a>
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20000220 	.word	0x20000220

08003dfc <__sread>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	460c      	mov	r4, r1
 8003e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e04:	f000 f896 	bl	8003f34 <_read_r>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	bfab      	itete	ge
 8003e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e10:	181b      	addge	r3, r3, r0
 8003e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e16:	bfac      	ite	ge
 8003e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e1a:	81a3      	strhlt	r3, [r4, #12]
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <__swrite>:
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	461f      	mov	r7, r3
 8003e24:	898b      	ldrh	r3, [r1, #12]
 8003e26:	05db      	lsls	r3, r3, #23
 8003e28:	4605      	mov	r5, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4616      	mov	r6, r2
 8003e2e:	d505      	bpl.n	8003e3c <__swrite+0x1e>
 8003e30:	2302      	movs	r3, #2
 8003e32:	2200      	movs	r2, #0
 8003e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e38:	f000 f868 	bl	8003f0c <_lseek_r>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	4632      	mov	r2, r6
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e52:	f000 b817 	b.w	8003e84 <_write_r>

08003e56 <__sseek>:
 8003e56:	b510      	push	{r4, lr}
 8003e58:	460c      	mov	r4, r1
 8003e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5e:	f000 f855 	bl	8003f0c <_lseek_r>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	bf15      	itete	ne
 8003e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e72:	81a3      	strheq	r3, [r4, #12]
 8003e74:	bf18      	it	ne
 8003e76:	81a3      	strhne	r3, [r4, #12]
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <__sclose>:
 8003e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7e:	f000 b813 	b.w	8003ea8 <_close_r>
	...

08003e84 <_write_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4c07      	ldr	r4, [pc, #28]	; (8003ea4 <_write_r+0x20>)
 8003e88:	4605      	mov	r5, r0
 8003e8a:	4608      	mov	r0, r1
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	6022      	str	r2, [r4, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fd f85f 	bl	8000f56 <_write>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_write_r+0x1e>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_write_r+0x1e>
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000220 	.word	0x20000220

08003ea8 <_close_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4c06      	ldr	r4, [pc, #24]	; (8003ec4 <_close_r+0x1c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4605      	mov	r5, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	f7fd f86b 	bl	8000f8e <_close>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_close_r+0x1a>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_close_r+0x1a>
 8003ec0:	602b      	str	r3, [r5, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000220 	.word	0x20000220

08003ec8 <_fstat_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4c07      	ldr	r4, [pc, #28]	; (8003ee8 <_fstat_r+0x20>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4605      	mov	r5, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	f7fd f866 	bl	8000fa6 <_fstat>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d102      	bne.n	8003ee4 <_fstat_r+0x1c>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	b103      	cbz	r3, 8003ee4 <_fstat_r+0x1c>
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000220 	.word	0x20000220

08003eec <_isatty_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4c06      	ldr	r4, [pc, #24]	; (8003f08 <_isatty_r+0x1c>)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4605      	mov	r5, r0
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	f7fd f865 	bl	8000fc6 <_isatty>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_isatty_r+0x1a>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_isatty_r+0x1a>
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	20000220 	.word	0x20000220

08003f0c <_lseek_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4c07      	ldr	r4, [pc, #28]	; (8003f2c <_lseek_r+0x20>)
 8003f10:	4605      	mov	r5, r0
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	2200      	movs	r2, #0
 8003f18:	6022      	str	r2, [r4, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7fd f85e 	bl	8000fdc <_lseek>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_lseek_r+0x1e>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_lseek_r+0x1e>
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	20000220 	.word	0x20000220

08003f30 <__malloc_lock>:
 8003f30:	4770      	bx	lr

08003f32 <__malloc_unlock>:
 8003f32:	4770      	bx	lr

08003f34 <_read_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4c07      	ldr	r4, [pc, #28]	; (8003f54 <_read_r+0x20>)
 8003f38:	4605      	mov	r5, r0
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc ffea 	bl	8000f1c <_read>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_read_r+0x1e>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_read_r+0x1e>
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000220 	.word	0x20000220

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
